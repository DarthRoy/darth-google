/*
body
*/
  .body {
  font-family: arial,sans-serif;
  background: #fff;
  color: #222;
}

    /*header
    .header {
      text-align: right; => aligner à droite ( center ou left)
      list-style-type: none;= enlever les puces
      display: inline;= met une liste sur une raw
      box-shadow: none => pas d'ombres
      border: none; pas de contours
      padding => marge intérieure
      background-color: blue couleur de fond de l'élément
      color: white;=> couleur police
        font-weight: bold; => texte en gras
    */
.headerul {
  list-style-type: none;
  text-align: right;
  margin-right: 40px;
  margin-top: 20px;
}

.headerli {
  display: inline;
  padding-left: 8px;
  padding-right: 8px;
  font-size: 12px;
}

.headerli>a {
  color:black;
}

.headerbutton {
  box-shadow: none;
  border: none;
  padding:10px 10px;
  background-color: blue;
  color: white;
  font-weight: bold;


}

/*section

*/
section {
margin-top: 140px;

}
/*form de l'input : déf de la longueur et de largeur*/
form {
margin-top: 30px;
}
input {
  width:400px;
  height: 50px;
  background-color:white;
  border:1px solid #ffe6e6;
  box-shadow: 0px 2px 6px 1px rgba(0, 0, 0, 0.2);
}

.buttonsection {
  margin-top: 30px;
  box-shadow: none;
  border: none;
  font-size: 12px;
  background-color: #ffe6e6;
  color: #666666;
  font-weight: bold;
  padding: 10px 10px;
  margin-left:5px;
  margin-right: 5px;
}

/*section*/


/*colonne de gauche du footer*/
#colgauche {
  text-align: left;
  padding:10px;
  border: 1px solid blue;
  margin:
}

/* colonne de droite du footer*/
#coldroite {
  text-align: right;
  border: 1px solid red;
  padding:10px;
  margin:
  }

/*
FLEXBOX
#pond {
  display: flex;

justify-content:
    flex-starts;
    flex-end;
    center;
    space-between????; space-around???;
flex-direction:
    row;
    row-reverse;
    column;
    column-reverse;
align-items: (ou align-self, pour un item)
    flex-starts; (en haut)
    flex-end;    (en bas)
    center;      (au centre)
    basline;
    stretch;
order : <integer> (...-1,0,1,...)

flex-wrap :Spread them out using the flex-wrap property, which accepts the following values:
    nowrap: Every item is fit to a single line.
    wrap: Items wrap around to additional lines.
    wrap-reverse: Items wrap around to additional lines in reverse.

flex-flow
The two properties flex-direction and flex-wrap are used so often together that the shorthand property flex-flow was created to combine them. This shorthand property accepts the value of one of the two properties separated by a space.
For example, you can use flex-flow: row wrap to set rows and wrap them.
Try using flex-flow to repeat the previous level.

flex-start: Items align to the left side of the container.
flex-end: Items align to the right side of the container.
center: Items align at the center of the container.
space-between: Items display with equal spacing between them.
space-around: Items display with equal spacing around them.
{
display: flex;
justify-content:flex-end;
}

Now use align-items to help the frogs get to the bottom of the pond.
This CSS property aligns items vertically and accepts the following values:

    flex-start: Items align to the top of the container.
    flex-end: Items align to the bottom of the container.
    center: Items align at the vertical center of the container.
    baseline: Items display at the baseline of the container.
    stretch: Items are stretched to fit the container.

Lead the frog to the center of the pond using a combination of justify-content and align-items.
ex :
justify-content:center;
align-items:center

The frogs need to get in the same order as their lilypads using flex-direction.
This CSS property defines the direction items are placed in the container, and accepts the following values:
    row: Items are placed the same as the text direction.
    row-reverse: Items are placed opposite to the text direction.
    column: Items are placed top to bottom.
    column-reverse: Items are placed bottom to top.

Help the frogs find their column of lilypads using flex-direction. This CSS property defines the direction items are placed in the container, and accepts the following values:
        row: Items are placed the same as the text direction.
        row-reverse: Items are placed opposite to the text direction.
        column: Items are placed top to bottom.
        column-reverse: Items are placed bottom to top.

Help the frogs get to their own lilypads.
Although they seem close, it will take both flex-direction and justify-content to get them there.
Notice that when you set the direction to a reversed row or column, start and end are also reversed.

Help the frogs find their lilypads using flex-direction and justify-content.
Notice that when the flex direction is a column,
justify-content changes to the vertical and align-items to the horizontal.

Sometimes reversing the row or column order of a container is not enough. In these cases,
we can apply the order property to individual items.
By default, items have a value of 0, but we can use this property to set it to a positive or negative integer value.

The frogs are spread all over the pond, but the lilypads are bunched at the top. You can use align-content to set how multiple lines are spaced apart from each other. This property takes the following values:

    flex-start: Lines are packed at the top of the container.
    flex-end: Lines are packed at the bottom of the container.
    center: Lines are packed at the vertical center of the container.
    space-between: Lines display with equal spacing between them.
    space-around: Lines display with equal spacing around them.
    stretch: Lines are stretched to fit the container.

This can be confusing, but align-content determines the spacing between lines, while align-items determines how the items as a whole are aligned within the container. When there is only one line, align-content has no effect.

*/
